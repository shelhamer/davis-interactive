{
    "docs": [
        {
            "location": "/",
            "text": "DAVIS Interactive Evaluation Framework\n\u00b6\n\n\n \n \n \n\n\nThis is a framework to evaluate interactive segmentation models over the \nDAVIS 2017\n dataset. The code aims to provide an easy-to-use interface to test and validate interactive segmentation models.\n\n\nThis is the tool used to evaluate the interactive track on the DAVIS Challenge on Video Object Segmentation 2018. More info about the challenge on the \nofficial website\n.\n\n\nYou can find an example of how to use the package in the following repository:\n\n\n\n\nScribble-OSVOS\n\n\n\n\nDAVIS Scribbles\n\u00b6\n\n\nIn the DAVIS \nMain\n Challenge track, the task consists on object segmentation in a \nsemi-supervised\n manner, i.e. the given input is the ground truth mask of the first frame. In the DAVIS \nInteractive\n Challenge, in contrast, the user input is in form of scribbles, which can be drawn much faster by humans and thus is a more realistic type of input. The same objects as the ones of the \nMain\n track have been annotated with scribbles.\n\n\n\n\n\n\n\n\n\n\n\nThe interactive annotation and segmentation consist in an iterative loop which is going to be evaluated as follows:\n\n\n\n\nOn the first iteration, a human-annotated scribble is provided to the segmentation model. \n \nNote\n: the annotated frame can be any of the sequence, as the annotators were instructed to annotate the most relevant and meaningful frame. This is in contrast to the \nMain\n track, where - only and strictly - the first frame is annotated.\n\n\nDuring the rest of the iterations, once the predicted masks have been submitted, a scribble is simulated by the server. The new annotation will be performed on a single frame and this frame will be chosen as the one on which the current result is the worst.\n\n\n\n\nEvaluation\n: For now, the evaluation metric will be the Jaccard similarity \n\\mathcal{J}\n\\mathcal{J}\n.\n\n\nCitation\n\u00b6\n\n\nPlease cite both papers in your publications if DAVIS or this code helps your research.\n\n\n@article\n{\nCaelles\n_\narXiv\n_\n2018,\n  author = \n{\nSergi Caelles and Alberto Montes and Kevis-Kokitsi Maninis and Yuhua Chen and Luc \n{\nVan Gool\n}\n and Federico Perazzi and Jordi Pont-Tuset\n}\n,\n  title = \n{\nThe 2018 DAVIS Challenge on Video Object Segmentation\n}\n,\n  journal = \n{\narXiv:1803.00557\n}\n,\n  year = \n{\n2018\n}\n\n\n}\n\n\n\n\n\n@article\n{\nPont-Tuset\n_\narXiv\n_\n2017,\n  author = \n{\nJordi Pont-Tuset and Federico Perazzi and Sergi Caelles and Pablo Arbel\n\\'\naez and Alexander Sorkine-Hornung and Luc \n{\nVan Gool\n}}\n,\n  title = \n{\nThe 2017 DAVIS Challenge on Video Object Segmentation\n}\n,\n  journal = \n{\narXiv:1704.00675\n}\n,\n  year = \n{\n2017\n}\n\n\n}",
            "title": "Home"
        },
        {
            "location": "/#davis-interactive-evaluation-framework",
            "text": "This is a framework to evaluate interactive segmentation models over the  DAVIS 2017  dataset. The code aims to provide an easy-to-use interface to test and validate interactive segmentation models.  This is the tool used to evaluate the interactive track on the DAVIS Challenge on Video Object Segmentation 2018. More info about the challenge on the  official website .  You can find an example of how to use the package in the following repository:   Scribble-OSVOS",
            "title": "DAVIS Interactive Evaluation Framework"
        },
        {
            "location": "/#davis-scribbles",
            "text": "In the DAVIS  Main  Challenge track, the task consists on object segmentation in a  semi-supervised  manner, i.e. the given input is the ground truth mask of the first frame. In the DAVIS  Interactive  Challenge, in contrast, the user input is in form of scribbles, which can be drawn much faster by humans and thus is a more realistic type of input. The same objects as the ones of the  Main  track have been annotated with scribbles.     The interactive annotation and segmentation consist in an iterative loop which is going to be evaluated as follows:   On the first iteration, a human-annotated scribble is provided to the segmentation model.    Note : the annotated frame can be any of the sequence, as the annotators were instructed to annotate the most relevant and meaningful frame. This is in contrast to the  Main  track, where - only and strictly - the first frame is annotated.  During the rest of the iterations, once the predicted masks have been submitted, a scribble is simulated by the server. The new annotation will be performed on a single frame and this frame will be chosen as the one on which the current result is the worst.   Evaluation : For now, the evaluation metric will be the Jaccard similarity  \\mathcal{J} \\mathcal{J} .",
            "title": "DAVIS Scribbles"
        },
        {
            "location": "/#citation",
            "text": "Please cite both papers in your publications if DAVIS or this code helps your research.  @article { Caelles _ arXiv _ 2018,\n  author =  { Sergi Caelles and Alberto Montes and Kevis-Kokitsi Maninis and Yuhua Chen and Luc  { Van Gool }  and Federico Perazzi and Jordi Pont-Tuset } ,\n  title =  { The 2018 DAVIS Challenge on Video Object Segmentation } ,\n  journal =  { arXiv:1803.00557 } ,\n  year =  { 2018 }  }   @article { Pont-Tuset _ arXiv _ 2017,\n  author =  { Jordi Pont-Tuset and Federico Perazzi and Sergi Caelles and Pablo Arbel \\' aez and Alexander Sorkine-Hornung and Luc  { Van Gool }} ,\n  title =  { The 2017 DAVIS Challenge on Video Object Segmentation } ,\n  journal =  { arXiv:1704.00675 } ,\n  year =  { 2017 }  }",
            "title": "Citation"
        },
        {
            "location": "/challenge/",
            "text": "DAVIS Challenge 2018 Interactive Track\n\u00b6\n\n\nIn this section we are going to explain in more detail how the Interactive Track of the DAVIS 2018 Challenge works. The technical challenges behind this track make us be cautious about this first edition, so we launch it in beta mode.\n\n\nDataset\n\u00b6\n\n\nThe Interactive Track is built on the DAVIS 2017 dataset. Video sequences, annotated objects, as well as data splits are the same as the ones in the Semi-Supervised track, and the sequences have been manually annotated with scribbles. The annotators were instructed to label all objects of a sequence in a representative frame (not necessarily the first frame of the sequence as in the Semi-Supervised track).\n\n\nFor every sequence of DAVIS 2017 there are 3 different sets of scribbles, annotated by different users. The figure below illustrates an example of three different user annotations on the same sequence \ndogs-jump\n. Note that annotations were performed on different frames, chosen by the respective users.\n\n\n\n\n\n\n\n\n\n\n\nWorkflow\n\u00b6\n\n\nThe aim of this challenge is to evaluate interactive models that can provide high quality segmentation masks, using scribbles and multiple interactions. Scribbles are a realistic form of supervision when it comes to video object segmentation, as they can be obtained much faster than full segmentation masks.\n\n\nThe workflow to evaluate these interactive models is as follows. A video sequence and a set of scribbles are given to the user. \n\n\n\n\nNote\n\n\nSince there are 3 annotations per each sequence, the same sequence will be evaluated multiple times, starting from different annotated scribbles.\n\n\n\n\nThe user must run their model to perform a prediction of the masks for the entire sequence, starting from the given scribble. As timing is important, the time taken to perform this prediction is measured. Once the user has made the prediction and submited their results, a new set of scribbles for this sequence will be returned, simulating human interaction. The returned annotation is an additional set of scribbles on the frame where the prediction failed the most (i.e. worst Jaccard score). These annotations are performed automatically, simulating human behaviour.\n\n\nThe following images show an example. The method makes a prediction, given the scribbles from the previous iteration(s) (left). Once the results are submitted, there are evaluated, and an additional set of scribbles is generated (right). The robot focuses on the zones where the error in prediction is the highest and tries to give feedback, as a human would do.\n\n\n\n\n\n\n\n\n\n\n\nThe additional annotation given to the user should be used again by its model to perform a new prediction of the masks. This procedure will be repeated until a maximum number of interactions or a timeout is reached. The timeout is proportional to the number of objects in the sequence.\n\n\n\n\nExample\n\n\nIf the maximum number of interactions is set to 8, and the timeout to perform all interactions is 240s, this leads to a maximum time of 30 seconds per interaction. However, the timeout is proportional to the number of objects in the sequence. Thus the timeout for a sequence with a single object (eg. \nblackswan\n) will be 30s per interaction, while for a sequence with 10 objects (eg. \nsalsa\n) the limit is set to 300s. This behaviour favours models for which the prediction time is proportional to the number of objects in the sequence.\n\n\n\n\nLocal\n\u00b6\n\n\nThis framework also provides the possibility to evaluate the methods locally. Local evaluation is possible only for the \ntrain\n and \nval\n subsets.\n\n\nRemote\n\u00b6\n\n\nIn order to submit results to the Interactive Challenge, the frameworks allows to evaluate models agains a remote server. For remote evaluation, only the \ntest-dev\n subset will be available and the results will be used for ranking in the challenge.\n\n\nIn order to participate to the challenge a registration is required. To register, please go to \nhttps://server.davischallenge.org\n and fill in the form with your information. A mail will be sent to the provided email with a user key required for the remote evaluation. This key should be put in your code in order to identify every user.\n\n\nIn addition, when the evaluation session is finished and a global sumary of the session is generated, a session ID will be given to the user. This session ID will allow the user identify its run and match them in the leaderboard.\n\n\nEvaluation\n\u00b6\n\n\nThe main metric used to evaluate the predicted masks is the Jaccard similarity. The time that each method takes to make a prediction is also taken into account. The average jaccard for all objects and for all starting scribbles will be reported in every interaction.  We are aware that some models may hit the timeout and not reach the maximum number of interactions. In this case, for every sample with missing interactions, the evaluation of these particular interactions will be the same as the last interaction performed with 0 time cost.\n\n\nIn the end, a curve showing Jaccard as a function of Accumulated Time will be generated. In the following example you can see an example of how the curve looks like for a baseline method \nScribble-OSVOS\n:\n\n\n\n\n\n\n\n\n\n\n\nGiven this curve, two parameters will be extracted to rank the user's models in order to compare them:\n\n\n\n\n\n\nAUC\nAUC\n: Area under the curve. The area under the previous curve will be computed and normalized by the total available time.\n\n\n\n\n\n\n\\mathcal{J}_{60s}\n\\mathcal{J}_{60s}\n: Jaccard at 60 seconds. This metric will be computed performing a interpolation of the previous curve at 60 seconds. This will encourage the users to implement and test fast models capable of giving good predictions in a short time.",
            "title": "Challenge"
        },
        {
            "location": "/challenge/#davis-challenge-2018-interactive-track",
            "text": "In this section we are going to explain in more detail how the Interactive Track of the DAVIS 2018 Challenge works. The technical challenges behind this track make us be cautious about this first edition, so we launch it in beta mode.",
            "title": "DAVIS Challenge 2018 Interactive Track"
        },
        {
            "location": "/challenge/#dataset",
            "text": "The Interactive Track is built on the DAVIS 2017 dataset. Video sequences, annotated objects, as well as data splits are the same as the ones in the Semi-Supervised track, and the sequences have been manually annotated with scribbles. The annotators were instructed to label all objects of a sequence in a representative frame (not necessarily the first frame of the sequence as in the Semi-Supervised track).  For every sequence of DAVIS 2017 there are 3 different sets of scribbles, annotated by different users. The figure below illustrates an example of three different user annotations on the same sequence  dogs-jump . Note that annotations were performed on different frames, chosen by the respective users.",
            "title": "Dataset"
        },
        {
            "location": "/challenge/#workflow",
            "text": "The aim of this challenge is to evaluate interactive models that can provide high quality segmentation masks, using scribbles and multiple interactions. Scribbles are a realistic form of supervision when it comes to video object segmentation, as they can be obtained much faster than full segmentation masks.  The workflow to evaluate these interactive models is as follows. A video sequence and a set of scribbles are given to the user.    Note  Since there are 3 annotations per each sequence, the same sequence will be evaluated multiple times, starting from different annotated scribbles.   The user must run their model to perform a prediction of the masks for the entire sequence, starting from the given scribble. As timing is important, the time taken to perform this prediction is measured. Once the user has made the prediction and submited their results, a new set of scribbles for this sequence will be returned, simulating human interaction. The returned annotation is an additional set of scribbles on the frame where the prediction failed the most (i.e. worst Jaccard score). These annotations are performed automatically, simulating human behaviour.  The following images show an example. The method makes a prediction, given the scribbles from the previous iteration(s) (left). Once the results are submitted, there are evaluated, and an additional set of scribbles is generated (right). The robot focuses on the zones where the error in prediction is the highest and tries to give feedback, as a human would do.     The additional annotation given to the user should be used again by its model to perform a new prediction of the masks. This procedure will be repeated until a maximum number of interactions or a timeout is reached. The timeout is proportional to the number of objects in the sequence.   Example  If the maximum number of interactions is set to 8, and the timeout to perform all interactions is 240s, this leads to a maximum time of 30 seconds per interaction. However, the timeout is proportional to the number of objects in the sequence. Thus the timeout for a sequence with a single object (eg.  blackswan ) will be 30s per interaction, while for a sequence with 10 objects (eg.  salsa ) the limit is set to 300s. This behaviour favours models for which the prediction time is proportional to the number of objects in the sequence.",
            "title": "Workflow"
        },
        {
            "location": "/challenge/#local",
            "text": "This framework also provides the possibility to evaluate the methods locally. Local evaluation is possible only for the  train  and  val  subsets.",
            "title": "Local"
        },
        {
            "location": "/challenge/#remote",
            "text": "In order to submit results to the Interactive Challenge, the frameworks allows to evaluate models agains a remote server. For remote evaluation, only the  test-dev  subset will be available and the results will be used for ranking in the challenge.  In order to participate to the challenge a registration is required. To register, please go to  https://server.davischallenge.org  and fill in the form with your information. A mail will be sent to the provided email with a user key required for the remote evaluation. This key should be put in your code in order to identify every user.  In addition, when the evaluation session is finished and a global sumary of the session is generated, a session ID will be given to the user. This session ID will allow the user identify its run and match them in the leaderboard.",
            "title": "Remote"
        },
        {
            "location": "/challenge/#evaluation",
            "text": "The main metric used to evaluate the predicted masks is the Jaccard similarity. The time that each method takes to make a prediction is also taken into account. The average jaccard for all objects and for all starting scribbles will be reported in every interaction.  We are aware that some models may hit the timeout and not reach the maximum number of interactions. In this case, for every sample with missing interactions, the evaluation of these particular interactions will be the same as the last interaction performed with 0 time cost.  In the end, a curve showing Jaccard as a function of Accumulated Time will be generated. In the following example you can see an example of how the curve looks like for a baseline method  Scribble-OSVOS :     Given this curve, two parameters will be extracted to rank the user's models in order to compare them:    AUC AUC : Area under the curve. The area under the previous curve will be computed and normalized by the total available time.    \\mathcal{J}_{60s} \\mathcal{J}_{60s} : Jaccard at 60 seconds. This metric will be computed performing a interpolation of the previous curve at 60 seconds. This will encourage the users to implement and test fast models capable of giving good predictions in a short time.",
            "title": "Evaluation"
        },
        {
            "location": "/user_guide/installation/",
            "text": "Installation\n\u00b6\n\n\nTo use this package it is necessary to install it (with \npip\n or by source) and also download the DAVIS 2017 Dataset. The instructions to do so are as follows.\n\n\nPyPi Install\n\u00b6\n\n\nTo install the package you can run the following command on your terminal:\n\n\n# Python 3 strongly recommended\n\n\n# Install numpy and Cython as are required to build our package\n\npip install numpy Cython\n\n# Install the package\n\npip install davisinteractive\n\n\n\n\nDAVIS Dataset\n\u00b6\n\n\nIn addition to installing the framework, you will need to download the \ntrainval\n DAVIS 2017 Dataset with 480p resolution from \nhere\n.\n\n\nMoreover, you can download the \ntrainval\n scribbles from \nhere\n.\nYou have to unzip the scibbles zip file in the folder containing DAVIS (in /path/to supposing DAVIS is in /path/to/DAVIS).\n\n\nNote\n: A script to download automatically the dataset and the scribbles is coming soon.\n\n\nInstall from Source\n\u00b6\n\n\nIf you prefer, you can install the package downloading the source code and installing it. To do so, you need to run these commands:\n\n\n# Download the code\n\ngit clone https://github.com/albertomontesg/davis-interactive.git \n&&\n \ncd\n davis-interactive\n\n# Install it - Python 3 recommended\n\npython setup.py install\n\n\n\n\nDevelopment\n\u00b6\n\n\nIf you want to contribute to this package you will need to have a copy of the code to work with. First, download the code from Github:\n\n\ngit clone https://github.com/albertomontesg/davis-interactive.git \n&&\n \ncd\n davis-interactive\ngit checkout -b my/new/branch\n\n\n\n\nTo have a development copy of the package installed for Python you can run the following:\n\n\npip3 install -e .\n\n\n\n\nThis will link the available copy of the package to your current copy so all the modifications that you made on the code will be visible by any script.\n\n\nIf you want to help us improve the documentation it will be necessary to have some additional packages:\n\n\npip3 install mkdocs pydoc-markdown mkdocs-material\n\n\n\n\nThen you serve the documentation live on your local machine to check the changes you make on the documentation.\n\n\ncd\n docs\n\n\n# Serve the documentation live\n\npydocmd serve\n\n\n# Build the documentation\n\n./build_docs.sh",
            "title": "Installation"
        },
        {
            "location": "/user_guide/installation/#installation",
            "text": "To use this package it is necessary to install it (with  pip  or by source) and also download the DAVIS 2017 Dataset. The instructions to do so are as follows.",
            "title": "Installation"
        },
        {
            "location": "/user_guide/installation/#pypi-install",
            "text": "To install the package you can run the following command on your terminal:  # Python 3 strongly recommended  # Install numpy and Cython as are required to build our package \npip install numpy Cython # Install the package \npip install davisinteractive",
            "title": "PyPi Install"
        },
        {
            "location": "/user_guide/installation/#davis-dataset",
            "text": "In addition to installing the framework, you will need to download the  trainval  DAVIS 2017 Dataset with 480p resolution from  here .  Moreover, you can download the  trainval  scribbles from  here .\nYou have to unzip the scibbles zip file in the folder containing DAVIS (in /path/to supposing DAVIS is in /path/to/DAVIS).  Note : A script to download automatically the dataset and the scribbles is coming soon.",
            "title": "DAVIS Dataset"
        },
        {
            "location": "/user_guide/installation/#install-from-source",
            "text": "If you prefer, you can install the package downloading the source code and installing it. To do so, you need to run these commands:  # Download the code \ngit clone https://github.com/albertomontesg/davis-interactive.git  &&   cd  davis-interactive # Install it - Python 3 recommended \npython setup.py install",
            "title": "Install from Source"
        },
        {
            "location": "/user_guide/installation/#development",
            "text": "If you want to contribute to this package you will need to have a copy of the code to work with. First, download the code from Github:  git clone https://github.com/albertomontesg/davis-interactive.git  &&   cd  davis-interactive\ngit checkout -b my/new/branch  To have a development copy of the package installed for Python you can run the following:  pip3 install -e .  This will link the available copy of the package to your current copy so all the modifications that you made on the code will be visible by any script.  If you want to help us improve the documentation it will be necessary to have some additional packages:  pip3 install mkdocs pydoc-markdown mkdocs-material  Then you serve the documentation live on your local machine to check the changes you make on the documentation.  cd  docs # Serve the documentation live \npydocmd serve # Build the documentation \n./build_docs.sh",
            "title": "Development"
        },
        {
            "location": "/user_guide/usage/",
            "text": "Usage\n\u00b6\n\n\nThe simplest usage can be as follows:\n\n\nfrom\n \ndavisinteractive.session\n \nimport\n \nDavisInteractiveSession\n\n\n\nmodel\n \n=\n \nSegmentationModel\n()\n \n# Your segmentation model\n\n\n\nwith\n \nDavisInteractiveSession\n(\nhost\n=\n'localhost'\n,\n \ndavis_root\n=\n'path/to/DAVIS'\n)\n \nas\n \nsess\n:\n\n    \nwhile\n \nsess\n.\nnext\n():\n\n        \n# Get the current iteration's scribbles\n\n        \nsequence\n,\n \nscribbles\n,\n \n_\n \n=\n \nsess\n.\nget_scribbles\n()\n\n        \n# Your model predicts the segmentation masks from the scribbles\n\n        \npred_masks\n \n=\n \nmodel\n(\nsequence\n,\n \nscribbles\n)\n\n        \n# Submit your prediction\n\n        \nsess\n.\nsubmit_masks\n(\npred_masks\n)\n\n\n    \n# Get the DataFrame report\n\n    \nreport\n \n=\n \nsess\n.\nget_report\n()\n\n\n    \n# Get the global summary\n\n    \nsummary\n \n=\n \nsess\n.\nget_global_summary\n(\nsave_file\n=\n'summary.json'\n)\n\n\n\n\n\nLet us explain every component in detail to give a better understanding about how they work. \n\n\nSession\n\u00b6\n\n\nA session is a sequence of samples (a DAVIS sequence plus an initial scribble annotated by a human).\nEvery sample is going to be evaluated interactively for a number of iterations (in a defined time window).\nIn order to be more realistic, we provide 3 manually annotated scribbles per sequence. Submitted methods will be evaluated starting from all 3 scribbles for each sequence, and the results will be averaged.\n\n\nThe first step is to create a session to evaluate:\n\n\nwith\n \nDavisInteractiveSession\n(\nhost\n=\n'localhost'\n,\n \ndavis_root\n=\n'path/to/davis'\n)\n \nas\n \nsess\n:\n\n\n\n\n\nThis instructs the server where to perform the evaluation (\nlocalhost\n or remote), as well as the path of the DAVIS dataset files. \nIn case of development and local testing  (\nhost='localhost'\n), \nparameters such as the maximum number of interactions per sample, the maximum interaction time per object, as well as the dataset split used, can be tuned. \n\n\nIn case of evaluation for the Challenge and remote testing (\nhost='https://server.davischallenge.org'\n) and the \nuser_key\n parameter should be specified to the given user key. For more information about the user key and how to register to the Challenge, please check \nChallenge Section\n. In this case, the maximum number of interactions and the maximum interaction time will be set by the remote server so any value given to the \nDavisInteractiveSession\n class will be ignored.\n\n\nFor more information about the class and its possible values please check \nDavisInteractiveSession\n.\n\n\nControl Flow\n\u00b6\n\n\nIn order to simplify the control flow for the user, the session provides a function to move to the following interaction/sequence:\n\n\nwhile\n \nsess\n.\nnext\n():\n\n\n\n\n\nOnce the timeout or the maximum number of iterations is reached, this functions will move the evaluation to a new sequence or the same sequence with a different initial scribble. Otherwise, it will keep the current sequence in order to continue with more interactions.\n\n\nObtain Scribbles\n\u00b6\n\n\nFor every sample, there will be multiple iterations (depending on the time limit or the maximum number of iterations per sample). For every iteration you can call \nget_scribbles\n to obtain the scribbles for the next iteration. A tuple of three elements will be returned:\n\n\n\n\nsequence\n: the name of the sequence in the case you are using a model that depends on the sequence of the DAVIS dataset which you are evaluating.\n\n\nscribbles\n: the scribbles of the current iteration. This scribbles by default will be all the scribbles generated for the current sample (the first human annotated and all the automatic generated at next iterations). If you call the method setting a flag \nget_scribbles(only_last=True)\n only the last iteration's scribbles will be returned.\n\n\nnew_sequence\n: this is a flag indicating whether the given scribbles correspond to the first iteration of the sample.\n\n\n\n\nwith\n \nDavisInteractiveSession\n(\nhost\n=\n'localhost'\n,\n \ndavis_root\n=\n'path/to/davis'\n)\n \nas\n \nsess\n:\n\n    \nwhile\n \nsess\n.\nnext\n():\n\n        \nsequence\n,\n \nscribbles\n,\n \nnew_sequence\n \n=\n \nsess\n.\nget_scribbles\n(\nonly_last\n)\n\n        \nif\n \nnew_sequence\n:\n\n            \nmodel\n.\nload_weights\n(\nsequence\n)\n\n        \nmodel\n.\nonline_train\n(\nscribbles\n)\n\n        \npred_masks\n \n=\n \nmodel\n.\npredict\n()\n\n        \nsess\n.\nsubmit_masks\n(\npred_masks\n)\n\n\n\n\n\nScribbles Transformations\n\u00b6\n\n\nThe scribbles are represented as the different paths of the lines over each object ID. For more information about the scribbles format, check the page \nScribbles Format\n.\n\n\nThis format may not be convenient for everybody, and that is why some useful transformations are included on this framework:\n\n\n\n\nscribbles2mask\n: it converts the paths of lines into a mask where the closest pixels of all the path points are set to the object ID of the line. This method also provides the possibility to apply the Bressenham's algorithm to fill in the path if two points of a line are sampled very distant on the mask.\n\n\nscribbles2points\n: from the scribble, it extracts all the (x, y) coordinates of all the line points as well as its object ID.\n\n\n\n\nIf you think there is any new transformation or a modification to the current ones that might be useful to work with scribble data, please do not hesitate to send a \npull request\n.\n\n\nPrediction Submission\n\u00b6\n\n\nAfter each iteration, it is mandatory to submit the scribbles to evaluate and at the same time to automatically generate the scribble for the next iteration.\n\n\npred_masks\n \n=\n \nmodel\n.\npredict\n()\n\n\nsess\n.\nsubmit_masks\n(\npred_masks\n)\n\n\n\n\n\nFinal Result\n\u00b6\n\n\nOnce the session has finished a report can be asked using the \nget_report\n method. This method returns a Pandas DataFrame where every row is the evaluation of every sequence, iteration and frame; as well as the timing of every iteration. From this report, information of the performance against processing time can be extracted for comparison among interactive methods.\n\n\nFor a global summary with the values and the evaluation curve, use the \nget_global_summary\n method. This method returns a dictionary with all the metrics and values used to evaluate and compare models. For more information about how the evaluation works, please go to the \nChallenge Section\n.",
            "title": "Usage"
        },
        {
            "location": "/user_guide/usage/#usage",
            "text": "The simplest usage can be as follows:  from   davisinteractive.session   import   DavisInteractiveSession  model   =   SegmentationModel ()   # Your segmentation model  with   DavisInteractiveSession ( host = 'localhost' ,   davis_root = 'path/to/DAVIS' )   as   sess : \n     while   sess . next (): \n         # Get the current iteration's scribbles \n         sequence ,   scribbles ,   _   =   sess . get_scribbles () \n         # Your model predicts the segmentation masks from the scribbles \n         pred_masks   =   model ( sequence ,   scribbles ) \n         # Submit your prediction \n         sess . submit_masks ( pred_masks ) \n\n     # Get the DataFrame report \n     report   =   sess . get_report () \n\n     # Get the global summary \n     summary   =   sess . get_global_summary ( save_file = 'summary.json' )   Let us explain every component in detail to give a better understanding about how they work.",
            "title": "Usage"
        },
        {
            "location": "/user_guide/usage/#session",
            "text": "A session is a sequence of samples (a DAVIS sequence plus an initial scribble annotated by a human).\nEvery sample is going to be evaluated interactively for a number of iterations (in a defined time window).\nIn order to be more realistic, we provide 3 manually annotated scribbles per sequence. Submitted methods will be evaluated starting from all 3 scribbles for each sequence, and the results will be averaged.  The first step is to create a session to evaluate:  with   DavisInteractiveSession ( host = 'localhost' ,   davis_root = 'path/to/davis' )   as   sess :   This instructs the server where to perform the evaluation ( localhost  or remote), as well as the path of the DAVIS dataset files. \nIn case of development and local testing  ( host='localhost' ), \nparameters such as the maximum number of interactions per sample, the maximum interaction time per object, as well as the dataset split used, can be tuned.   In case of evaluation for the Challenge and remote testing ( host='https://server.davischallenge.org' ) and the  user_key  parameter should be specified to the given user key. For more information about the user key and how to register to the Challenge, please check  Challenge Section . In this case, the maximum number of interactions and the maximum interaction time will be set by the remote server so any value given to the  DavisInteractiveSession  class will be ignored.  For more information about the class and its possible values please check  DavisInteractiveSession .",
            "title": "Session"
        },
        {
            "location": "/user_guide/usage/#control-flow",
            "text": "In order to simplify the control flow for the user, the session provides a function to move to the following interaction/sequence:  while   sess . next ():   Once the timeout or the maximum number of iterations is reached, this functions will move the evaluation to a new sequence or the same sequence with a different initial scribble. Otherwise, it will keep the current sequence in order to continue with more interactions.",
            "title": "Control Flow"
        },
        {
            "location": "/user_guide/usage/#obtain-scribbles",
            "text": "For every sample, there will be multiple iterations (depending on the time limit or the maximum number of iterations per sample). For every iteration you can call  get_scribbles  to obtain the scribbles for the next iteration. A tuple of three elements will be returned:   sequence : the name of the sequence in the case you are using a model that depends on the sequence of the DAVIS dataset which you are evaluating.  scribbles : the scribbles of the current iteration. This scribbles by default will be all the scribbles generated for the current sample (the first human annotated and all the automatic generated at next iterations). If you call the method setting a flag  get_scribbles(only_last=True)  only the last iteration's scribbles will be returned.  new_sequence : this is a flag indicating whether the given scribbles correspond to the first iteration of the sample.   with   DavisInteractiveSession ( host = 'localhost' ,   davis_root = 'path/to/davis' )   as   sess : \n     while   sess . next (): \n         sequence ,   scribbles ,   new_sequence   =   sess . get_scribbles ( only_last ) \n         if   new_sequence : \n             model . load_weights ( sequence ) \n         model . online_train ( scribbles ) \n         pred_masks   =   model . predict () \n         sess . submit_masks ( pred_masks )",
            "title": "Obtain Scribbles"
        },
        {
            "location": "/user_guide/usage/#scribbles-transformations",
            "text": "The scribbles are represented as the different paths of the lines over each object ID. For more information about the scribbles format, check the page  Scribbles Format .  This format may not be convenient for everybody, and that is why some useful transformations are included on this framework:   scribbles2mask : it converts the paths of lines into a mask where the closest pixels of all the path points are set to the object ID of the line. This method also provides the possibility to apply the Bressenham's algorithm to fill in the path if two points of a line are sampled very distant on the mask.  scribbles2points : from the scribble, it extracts all the (x, y) coordinates of all the line points as well as its object ID.   If you think there is any new transformation or a modification to the current ones that might be useful to work with scribble data, please do not hesitate to send a  pull request .",
            "title": "Scribbles Transformations"
        },
        {
            "location": "/user_guide/usage/#prediction-submission",
            "text": "After each iteration, it is mandatory to submit the scribbles to evaluate and at the same time to automatically generate the scribble for the next iteration.  pred_masks   =   model . predict ()  sess . submit_masks ( pred_masks )",
            "title": "Prediction Submission"
        },
        {
            "location": "/user_guide/usage/#final-result",
            "text": "Once the session has finished a report can be asked using the  get_report  method. This method returns a Pandas DataFrame where every row is the evaluation of every sequence, iteration and frame; as well as the timing of every iteration. From this report, information of the performance against processing time can be extracted for comparison among interactive methods.  For a global summary with the values and the evaluation curve, use the  get_global_summary  method. This method returns a dictionary with all the metrics and values used to evaluate and compare models. For more information about how the evaluation works, please go to the  Challenge Section .",
            "title": "Final Result"
        },
        {
            "location": "/user_guide/scribbles/",
            "text": "Scribbles Default Format\n\u00b6\n\n\nThe scribbles are stored in a key-value dictionary which can be encoded in a \njson\n file or a dictionary object. The body of this dictionary should have the following fields:\n\n\n{\n\n    \n\"scribbles\"\n:\n \n[\n...\n],\n\n    \n\"sequence\"\n:\n \n\"sequence-name\"\n,\n\n    \n\"annotated_frame\"\n:\n \n10\n\n\n}\n\n\n\n\n\nThe fields represent the following:\n\n\n\n\nscribbles\n: a list of length equal to the number of frames of the sequence. For each frame there will be a list of all paths or lines of the scribbles\n\n\nsequence\n: sequence name of the scribble.\n\n\nannotated_frame\n (optional): number of the frame that is annotated for fast lookup.\n\n\n\n\nThe lines of the scribbles should be stored as follows:\n\n\n{\n\n    \n\"scribbles\"\n:\n \n[\n\n        \n[],\n\n        \n[],\n\n        \n...\n\n        \n[],\n\n        \n[{\n\n           \n\"path\"\n:\n \n[[\nx\n,\n \ny\n]\n \n*\n \nnb_points\n],\n\n           \n\"object_id\"\n:\n \n0\n,\n\n           \n\"start_time\"\n:\n \n0\n,\n\n           \n\"end_time\"\n:\n \n1000\n,\n \n//\n \n1000ms\n \n=\n \n1s\n\n        \n},\n \n{\n\n           \n\"path\"\n:\n \n[[\nx\n,\n \ny\n]\n \n*\n \nnb_points\n],\n\n           \n\"object_id\"\n:\n \n1\n,\n\n           \n\"start_time\"\n:\n \n2000\n,\n\n           \n\"end_time\"\n:\n \n3000\n,\n\n        \n}],\n \n//\n \nAnnotated\n \nframe\n\n        \n[],\n\n        \n...\n\n        \n[],\n\n        \n[]\n\n    \n],\n\n    \n\"sequence\"\n:\n \n\"sequence-name\"\n,\n\n    \n\"annotated_frame\"\n:\n \n10\n\n\n}",
            "title": "Scribbles Format"
        },
        {
            "location": "/user_guide/scribbles/#scribbles-default-format",
            "text": "The scribbles are stored in a key-value dictionary which can be encoded in a  json  file or a dictionary object. The body of this dictionary should have the following fields:  { \n     \"scribbles\" :   [ ... ], \n     \"sequence\" :   \"sequence-name\" , \n     \"annotated_frame\" :   10  }   The fields represent the following:   scribbles : a list of length equal to the number of frames of the sequence. For each frame there will be a list of all paths or lines of the scribbles  sequence : sequence name of the scribble.  annotated_frame  (optional): number of the frame that is annotated for fast lookup.   The lines of the scribbles should be stored as follows:  { \n     \"scribbles\" :   [ \n         [], \n         [], \n         ... \n         [], \n         [{ \n            \"path\" :   [[ x ,   y ]   *   nb_points ], \n            \"object_id\" :   0 , \n            \"start_time\" :   0 , \n            \"end_time\" :   1000 ,   //   1000ms   =   1s \n         },   { \n            \"path\" :   [[ x ,   y ]   *   nb_points ], \n            \"object_id\" :   1 , \n            \"start_time\" :   2000 , \n            \"end_time\" :   3000 , \n         }],   //   Annotated   frame \n         [], \n         ... \n         [], \n         [] \n     ], \n     \"sequence\" :   \"sequence-name\" , \n     \"annotated_frame\" :   10  }",
            "title": "Scribbles Default Format"
        },
        {
            "location": "/docs/session/",
            "text": "davisinteractive.session\n\n\n\nDavisInteractiveSession\n\n\n\nDavisInteractiveSession\n(\nself\n,\n \nhost\n=\n'localhost'\n,\n \nuser_key\n=\nNone\n,\n \ndavis_root\n=\nNone\n,\n \nsubset\n=\n'val'\n,\n \nshuffle\n=\nFalse\n,\n \nmax_time\n=\nNone\n,\n \nmax_nb_interactions\n=\n5\n,\n \nreport_save_dir\n=\nNone\n)\n\n\n\nClass which allows to interface with the evaluation.\n\n\nArguments\n\n\n\n\nhost\n: String. Host of the evuation server. Only \nlocalhost\n\n        available for now.\n\n\nuser_key\n: String. User identifier (e.g. email). If the session is being\n        run in \nlocalhost\n, \nuser_key\n does not need to be specified\n        (username will be used).\n\n\ndavis_root\n: String. Path to the Davis dataset root path. Necessary\n        for evaluation when \nhost='localhost'\n.\n\n\nsubset\n: String. Subset to evaluate. If \nhost='localhost'\n subset\n        can only be \ntrain\n or \nval\n subsets. If the evaluation is\n        performed against a remote server, this parameter is ignored\n        and the evaulated subset will be given by the remote server.\n\n\nshuffle\n: Boolean. Shuffle the samples when evaluating.\n\n\nmax_time\n: Integer. Number of seconds maximum to evaluate a single\n        sample.\n\n\nmax_nb_interactins\n: Integer. Maximum number of interactions to\n        evaluate per sample.\n\n\nreport_save_dir\n: String. Path to the directory where the report will\n        be stored during the evaluation. By default is the current working\n        directory. A temporal file will be storing snapshots of the results\n        on this same directory with a suffix \n.tmp\n.\n\n\n\n\nnext\n\n\n\nDavisInteractiveSession\n.\nnext\n(\nself\n)\n\n\n\nIterate to the next iteration/sample of the evaluation process.\n\n\nThis function moves the iteration to the next iteration or to the next\nsample in case the maximum number of iterations or maximum time have\nbeen hit.\nThis function can be used as control flow on user's code to know until\nwhich iteration the evuation is being performed.\n\n\nReturns\n\n\nbool\n: Indicates whether the evaluation is still taking place.\n\n\nget_scribbles\n\n\n\nDavisInteractiveSession\n.\nget_scribbles\n(\nself\n,\n \nonly_last\n=\nFalse\n)\n\n\n\nAsk for the next scribble\n\n\nThere is the possibility to ask for only the last scribble. By default,\nall scribbles obtained for the current sample are returned.\n\n\nThis method returns information about the sequence of the sample being\nevaluated, the scribbles and whether it is a new sample. This\ninformation might be useful for the user to perform any operation like\nloading a model for a new sequence.\n\n\nArguments\n\n\n\n\nonly_last\n: Boolean.\n\n\n\n\nReturns\n\n\n(string, dict, bool)\n: Returns the name of the sequence of the\n        current sample, the scribbles of the current sample and a\n        boolean indicating whether it is the first iteration of the\n        given sample, respectively.\n\n\nscribbles_iterator\n\n\n\nDavisInteractiveSession\n.\nscribbles_iterator\n(\nself\n,\n \n*\nargs\n,\n \n**\nkwargs\n)\n\n\n\nIterate over all the samples and iterations to evaluate.\n\n\nInstead of running a while loop with\n\nDavisInteractiveSession.next\n and then call to\n\nDavisInteractiveSession.get_scribbles\n, you can iterate with this\ngenerator:\n\n\nExample\n\n\nfor\n \nsequence\n,\n \nscribble\n,\n \nnew_sequence\n \nin\n \nsess\n.\nscribbles_iterator\n():\n\n    \n# Predict with model\n\n\n\n\n\nArguments\n\n\n\n\n*args, **kwargs\n: This arguments will be passed internally to\n        \nDavisInteractiveSession.get_scribbles\n method.\n\n\n\n\nYields\n\n\n(string, dict, bool)\n: Yields the name of the sequence of the\n        current sample, the scribbles of the current sample and a\n        boolean indicating if it is the first iteration of the given\n        sample, respectively.\n\n\nsubmit_masks\n\n\n\nDavisInteractiveSession\n.\nsubmit_masks\n(\nself\n,\n \npred_masks\n)\n\n\n\nSubmit the predicted masks.\n\n\nArguments\n\n\n\n\npred_masks\n: Numpy array with the predicted mask for\n        the current sample. The array must be of \ndtype=np.int\n and\n        of size equal to the 480p resolution of the DAVIS\n        dataset.\n\n\n\n\nget_report\n\n\n\nDavisInteractiveSession\n.\nget_report\n(\nself\n)\n\n\n\nGives the current report of the evaluation\n\n\nReturns\n\n\npd.DataFrame\n: Dataframe with the current evaluation results. This\n        DataFrame contains the same table as the store on\n        \nreport_save_dir\n.\n\n\nget_global_summary\n\n\n\nDavisInteractiveSession\n.\nget_global_summary\n(\nself\n,\n \nsave_file\n=\nNone\n)\n\n\n\nGives a summary from the current session.\n\n\nIn the case the session is running against the remote server, when\ncalling this function, the current session will be marked as completed.\n\n\nArguments\n\n\n\n\nsave_file\n: String or Path. Path to store the global summary of the\n        session. By default does not save it.\n\n\n\n\nReturns\n\n\nDictionary\n: Dictionary of parameters that summarize all the session.",
            "title": "session"
        },
        {
            "location": "/docs/dataset.davis/",
            "text": "davisinteractive.dataset\n\n\n\nDavis\n\n\n\nDavis\n(\nself\n,\n \ndavis_root\n=\nNone\n)\n\n\n\nDAVIS class to encapsulate some information about the dataset.\n\n\nThis class only needs to have the root path specified. Some\natributes can be accessible like the sequence list for every subset, or\nspecific information for every sequence like the number of frames, the\nnumber of objects or the image size for every sequence.\nFor more information about the sequence attributes available, check this\n\nfile\n.\n\n\nArguments\n\n\n\n\ndavis_root\n: String. Path to the DAVIS dataset. This argument can\n        be left as \nNone\n and specify it as an environtmental variable\n        \nDATASET_DAVIS\n. This usage is useful in the case a group of\n        people is working with the same code and every one has a different\n        path where the DAVIS dataset is stored. The folder name where all\n        DAVIS dataset is stored must be names \nDAVIS\n.\n\n\n\n\nAttributes\n\n\n\n\nANNOTATIONS_SUBDIR\n: Relative path with respect to the root path where\n        the ground truth masks are stored. (Annotations)\n\n\nSCRIBBLES_SUBDIR\n: Relative path with respect to the root path where the\n        scribbles are stored. (Scribbles)\n\n\nRESOLUTION\n: Resolution of the dataset used to perform all the\n        evaluation. (480p)\n\n\nsets\n: Dictionary. The keys are all the DAVIS dataset subsets and the\n        values are the list of sequences belonging to that subset.\n\n\ndataset\n: Dictionary. Contains all the information for the entire\n        dataset.\n        The key is the sequence name and the value is a dictionary of\n        informations such as number of frames, number of objects, etc.\n\n\nyears\n: List. List with all the versions available from the dataset.\n\n\n\n\nRaises\n\n\n\n\nValueError\n: if neither \ndavis_root\n or environmental variable\n        \nDATASET_DAVIS\n are specified.\n\n\n\n\ncheck_files\n\n\n\nDavis\n.\ncheck_files\n(\nself\n,\n \nsequences\n)\n\n\n\nCheck if the required files are found on DAVIS root.\n\n\nCheck if all the annotations and scribbles files, required to do the\nevaluation are found on \ndavis_root\n.\nIf the scribbles files are not found, it downloads them from the\ninternet.\n\n\nArguments\n\n\n\n\nsequences\n: List. List of sequences you want to check.\n\n\n\n\nRaises\n\n\n\n\nFileNotFoundError\n: if any required files is not found.\n\n\n\n\nload_images\n\n\n\nDavis\n.\nload_images\n(\nself\n,\n \nsequence\n,\n \ndtype\n=<\nclass\n \n'\nnumpy\n.\nuint8\n'>)\n\n\n\nLoad the images of the specified sequence.\n\n\nArguments\n\n\n\n\nsequence\n: String. Sequence name.\n\n\ndtype\n: Numpy Data Type. Data type to return the images. Default\n        value is \nnp.uint8\n.\n\n\n\n\nReturns\n\n\nNumpy Array\n: Array with all images of the given sequence. The shape\n        of the array will be \n(nb_frames x H x W x 3)\n and the value\n\nwill be the pixel's value with range\n: \n[0, 255]\n.\n\n\nload_annotations\n\n\n\nDavis\n.\nload_annotations\n(\nself\n,\n \nsequence\n,\n \ndtype\n=<\nclass\n \n'\nint\n'>)\n\n\n\nLoad the annotations of the specified sequence.\n\n\nArguments\n\n\n\n\nsequence\n: String. Sequence name.\n\n\ndtype\n: Numpy Data Type. Data type to return the annotations.\n        Default value is \nnp.int\n.\n\n\n\n\nReturns\n\n\nNumpy Array\n: Array with the annotations of the given sequence. The\n        shape of the array will be \n(nb_frames x H x W)\n and the value\n        will be the index of the objects, being \n0\n the background.\n\n\nload_scribble\n\n\n\nDavis\n.\nload_scribble\n(\nself\n,\n \nsequence\n,\n \nscribble_idx\n)\n\n\n\nLoad the scribble from given sequence specifying its index.\n\n\nArguments\n\n\n\n\nsequence\n: String. Sequence name.\n\n\nscribble_idx\n: Integer. Index of the scribble to load.\n\n\n\n\nReturns\n\n\nDictionary\n: Scribble data stored in a dictionary with its default\n        format.",
            "title": "dataset.davis"
        },
        {
            "location": "/docs/evaluation.service/",
            "text": "EvaluationService\n\n\n\nEvaluationService\n(\nself\n,\n \nsubset\n,\n \nstorage\n=\nNone\n,\n \ndavis_root\n=\nNone\n,\n \nrobot_parameters\n=\nNone\n,\n \nmax_t\n=\nNone\n,\n \nmax_i\n=\nNone\n,\n \ntime_threshold\n=\nNone\n)\n\n\n\nClass responsible of the evaluation.\n\n\nThis class is responsible of giving the samples to run the evaluation,\nto give the asked scribbles and to evaluate the interaction with the robot\nonce the masks are submitted.\n\n\nArguments\n\n\n\n\nsubset\n: String. Subset to evaluate. Possible values are \ntrain\n, \nval\n,\n        'trainval' and \ntest-dev\n.\n\n\ndavis_root\n: String or Path. Path to the DAVIS dataset root directory,\n        where the scribbles and the masks are stored.\n\n\nrobot_parameters\n: Dictionary. Dictionary of parameters to initialize\n        the scribbles robot.\n\n\nmax_t\n: Integer. Number of seconds maximum to evaluate a single sample.\n        This value will overwrite the specified from the user at\n        \nDavisInteractiveSession\n class.\n\n\nmax_i\n: Integer. Maximum number of interactions to evaluate per sample.\n        This value will overwrite the specified from the user at\n        \nDavisInteractiveSession\n class.\n\n\ntime_threshold\n: Integer. Time in seconds to use it as threshold to\n        compute the jaccard and compare the evaluation of different methods.\n\n\n\n\nget_samples\n\n\n\nEvaluationService\n.\nget_samples\n(\nself\n)\n\n\n\nGet the list of samples.\n\n\nReturns\n\n\nList of Tuples\n: List of pairs where the first element is the\n        sequence name and the second is the scribble index to evaluate.\n\n\nget_scribble\n\n\n\nEvaluationService\n.\nget_scribble\n(\nself\n,\n \nsequence\n,\n \nscribble_idx\n)\n\n\n\nGet a scribble.\n\n\nArguments\n\n\n\n\nsequence\n: String. Sequence name of the scribble.\n\n\nscribble_idx\n: Integer. Index of the scribble to get.\n\n\n\n\nRaises\n\n\n\n\nValueError\n: when the sequence is invalid or the scribble index is\n        out of range.\n\n\n\n\npost_predicted_masks\n\n\n\nEvaluationService\n.\npost_predicted_masks\n(\nself\n,\n \nsequence\n,\n \nscribble_idx\n,\n \npred_masks\n,\n \ntiming\n,\n \ninteraction\n,\n \nuser_key\n,\n \nsession_key\n)\n\n\n\nPost the predicted masks and return new scribble.\n\n\nWhen the predicted masks are given, the metrics are computed and stored.\n\n\nArguments\n\n\n\n\nsequence\n: String. Sequence name of the predicted masks.\n\n\nscribble_idx\n: Integer. Scribble index of the sample evaluating.\n\n\npred_masks\n: Numpy Array. Predicted masks for the given sequence.\n\n\ntiming\n: Float. Timing in seconds of this interaction.\n\n\ninteraction\n: Integer. Interaction number.\n\n\nuser_key\n: String. User identifier.\n\n\nsession_key\n: String. Session identifier.\n\n\n\n\nReturns\n\n\nDictionary\n: Scribble returned by the scribble robot\n\n\nRaises\n\n\n\n\nRuntimeError\n: When a previous interaction is missing, or the\n        interaction has already been submitted.\n\n\nValueError\n: When interaction is higher than the maximum number of\n        interactions in the evaluation.\n\n\n\n\nget_report\n\n\n\nEvaluationService\n.\nget_report\n(\nself\n,\n \n**\nkwargs\n)\n\n\n\nGet report for a session.\n\n\nArguments\n\n\n\n\nuser_key\n: String. User identifier.\n\n\nsession_key\n: String. Session identifier.\n\n\n\n\nReturns\n\n\nPandas DataFrame\n: Report.\n\n\nsummarize_report\n\n\n\nEvaluationService\n.\nsummarize_report\n(\nself\n,\n \ndf\n)\n\n\n\nGiven a report it will reconstruct the missing entries and compute\na summarization of it.\n\n\nArguments\n\n\n\n\ndf\n: Pandas DataFrame. The report to summarize.\n\n\n\n\nReturns\n\n\nDictionary\n: with different scores computed and the curve values",
            "title": "evaluation.service"
        },
        {
            "location": "/docs/robot/",
            "text": "davisinteractive.robot.interactive_robot\n\n\n\nInteractiveScribblesRobot\n\n\n\nInteractiveScribblesRobot\n(\nself\n,\n \nkernel_size\n=\n0.15\n,\n \nmax_kernel_radius\n=\n16\n,\n \nmin_nb_nodes\n=\n4\n,\n \nnb_points\n=\n1000\n)\n\n\n\nRobot that generates realistic scribbles simulating human interaction.\n\n\nAttributes\n\n\n\n\nkernel_size\n: Float. Fraction of the square root of the area used\n        to compute the dilation and erosion before computing the\n        skeleton of the error masks.\n\n\nmax_kernel_radius\n: Float. Maximum kernel radius when applying\n        dilation and erosion. Default 16 pixels.\n\n\nmin_nb_nodes\n: Integer. Number of nodes necessary to keep a connected\n        graph and convert it into a scribble.\n\n\nnb_points\n: Integer. Number of points to sample the bezier curve\n        when converting the final paths into curves.\n\n\n\n\ninteract\n\n\n\nInteractiveScribblesRobot\n.\ninteract\n(\nself\n,\n \nsequence\n,\n \npred_masks\n,\n \ngt_masks\n,\n \nnb_objects\n=\nNone\n,\n \nframe\n=\nNone\n)\n\n\n\nInteraction of the Scribble robot given a prediction.\nGiven the sequence and a mask prediction, the robot will return a\nscribble in the region that fails the most.\n\n\nArguments\n\n\n\n\nsequence\n: String. Name of the sequence to interact with.\n\n\npred_masks\n: Numpy Array. Array with the prediction masks. It must\nbe an integer array with shape (B x H x W), with B being the number\nof frames of the sequence.\n\n\ngt_masks\n: Numpy Array. Array with the ground truth of the sequence.\nIt must have the same data type and shape as \npred_masks\n.\n\n\nnb_objects\n: Integer. Number of objects in the ground truth mask. If\n        \nNone\n the value will be infered from \ny_true\n. Setting this\n        value will speed up the computation.\n\n\nframe\n: Integer. Frame to generate the scribble. If not given, the\n        worst frame given by the jaccard will be used.\n\n\n\n\nReturns\n\n\ndict\n: Return a scribble (default representation).",
            "title": "robot.interactive_robot"
        },
        {
            "location": "/docs/metrics.jaccard/",
            "text": "davisinteractive.metrics.jaccard\n\n\n\nbatched_jaccard\n\n\n\nbatched_jaccard\n(\ny_true\n,\n \ny_pred\n,\n \naverage_over_objects\n=\nTrue\n,\n \nnb_objects\n=\nNone\n)\n\n\n\nBatch jaccard similarity for multiple instance segmentation.\n\n\nJaccard similarity over two subsets of binary elements \nA\nA\n and \nB\nB\n:\n\n\n\n\n\n\\mathcal{J} = \\frac{A \\cap B}{A \\cup B}\n\n\n\n\n\\mathcal{J} = \\frac{A \\cap B}{A \\cup B}\n\n\n\n\n\nArguments\n\n\n\n\ny_true\n: Numpy Array. Array of shape (B x H x W) and type integer giving the\n        ground truth of the object instance segmentation.\n\n\ny_pred\n: Numpy Array. Array of shape (B x H x W) and type integer giving the\n        prediction of the object segmentation.\n\n\naverage_over_objects\n: Boolean. Weather or not to average the jaccard over\n        all the objects in the sequence. Default True.\n\n\nnb_objects\n: Integer. Number of objects in the ground truth mask. If\n        \nNone\n the value will be infered from \ny_true\n. Setting this value\n        will speed up the computation.\n\n\n\n\nReturns\n\n\nndarray\n: Returns an array of shape (B) with the average jaccard for\n        all instances at each frame if \naverage_over_objects=True\n. If\n        \naverage_over_objects=False\n returns an array of shape (B x nObj)\n        with nObj being the number of objects on \ny_true\n.",
            "title": "metrics.jaccard"
        },
        {
            "location": "/docs/utils.operations/",
            "text": "davisinteractive.utils.operations\n\n\n\nbezier_curve\n\n\n\nbezier_curve\n(\npoints\n,\n \nnb_points\n=\n1000\n)\n\n\n\nGiven a list of points compute a bezier curve from it.\n\n\nArguments\n\n\n\n\npoints\n: ndarray. Array of points with shape (N, 2) with N being the\n        number of points and the second dimension representing the\n        (x, y) coordinates.\n\n\nnb_points\n: Integer. Number of points to sample from the bezier curve.\n        This value must be larger than the number of points given in\n        \npoints\n. Maximum value 10000.\n\n\n\n\nReturns\n\n\nndarray\n: Array of shape (1000, 2) with the bezier curve of the\n        given path of points.\n\n\nbresenham\n\n\n\nbresenham\n(\npoints\n)\n\n\n\nApply Bresenham algorithm for a list points.\n\n\nMore info: \nhttps://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n\n\nArguments\n\n\n\n\npoints\n: ndarray. Array of points with shape (N, 2) with N being the number\n        if points and the second coordinate representing the (x, y)\n        coordinates.\n\n\n\n\nReturns\n\n\nndarray\n: Array of points after having applied the bresenham algorithm.",
            "title": "utils.operations"
        },
        {
            "location": "/docs/utils.scribbles/",
            "text": "davisinteractive.utils.scribbles\n\n\n\nscribbles2mask\n\n\n\nscribbles2mask\n(\nscribbles\n,\n \noutput_resolution\n,\n \nbezier_curve_sampling\n=\nFalse\n,\n \nnb_points\n=\n1000\n,\n \nbresenham\n=\nTrue\n,\n \ndefault_value\n=-\n1\n)\n\n\n\nConvert the scribbles data into a mask.\n\n\nArguments\n\n\n\n\nscribbles\n: Dictionary. Scribbles in the default format.\n\n\noutput_resolution\n: Tuple. Output resolution (H, W).\n\n\nbezier_curve_sampling\n: Boolean. Weather to sample first the returned\n        scribbles using bezier curve or not.\n\n\nnb_points\n: Integer. If \nbezier_curve_sampling\n is \nTrue\n set the number\n        of points to sample from the bezier curve.\n\n\nbresenham\n: Boolean. Whether to compute bresenham algorithm for the\n        scribbles lines.\n\n\ndefault_value\n: Integer. Default value for the pixels which do not belong\n        to any scribble.\n\n\n\n\nReturns\n\n\nndarray\n: Array with the mask of the scribbles with the index of the\n        object ids. The shape of the returned array is (B x H x W) by\n        default or (H x W) if \nonly_annotated_frame==True\n.\n\n\nscribbles2points\n\n\n\nscribbles2points\n(\nscribbles_data\n,\n \noutput_resolution\n=\nNone\n)\n\n\n\nConvert the given scribbles into a list of points and object ids.\n\n\nArguments\n\n\n\n\nscribbles_data\n: Dictionary. Scribbles in the default format\n\n\noutput_resolution\n: Tuple. Output resolution (H, W) to scale the\n        points.\n        If None given, the points will be floats as a fraction of height\n        and width.\n\n\n\n\nReturns\n\n\n(ndarray, ndarray)\n: Returns (X, Y) where X is a list of points from the\n        scribbles represented in the output_resolution with shape (N x 3)\n        with N being the total number of points on all the scribbles. The three\n        coordinates given correspond the the frame number, height and width,\n        respectively.\n        Y is the object id for each given point with shape (N,).\n\n\nfuse_scribbles\n\n\n\nfuse_scribbles\n(\nscribbles_a\n,\n \nscribbles_b\n)\n\n\n\nFuse two scribbles in the default format.\n\n\nArguments\n\n\n\n\nscribbles_a\n: Dictionary. Default representation of scribbles A.\n\n\nscribbles_b\n: Dictionary. Default representation of scribbles B.\n\n\n\n\nReturns\n\n\ndict\n: Returns a dictionary with scribbles A and B fused.\n\n\nis_empty\n\n\n\nis_empty\n(\nscribbles_data\n)\n\n\n\nChecks whether the given scribble has any non-empty line.\n\n\nArguments\n\n\n\n\nscribbles_data (dict)\n: Scribble in the default format\n\n\n\n\nReturns\n\n\nbool\n: Whether the scribble is empty or not.\n\n\nannotated_frames\n\n\n\nannotated_frames\n(\nscribbles_data\n)\n\n\n\nFinds which frames have a scribble.\n\n\nArguments\n\n\n\n\nscribbles_data (dict)\n: Scribble in the default format.\n\n\n\n\nReturns\n\n\nlist\n: Number of the frames that contain at least one scribble.\n\n\nannotated_frames_object\n\n\n\nannotated_frames_object\n(\nscribbles_data\n,\n \nobject_id\n)\n\n\n\nComputes which frames have a scribble for a certain object.\n\n\nArguments\n\n\n\n\nscribbles_data (dict)\n: Scribble in the default format.\n\n\nobject_id (int)\n: Id of the object of interest.\n\n\n\n\nReturns\n\n\ndict\n: Number of the frames that contain at least one scribble.",
            "title": "utils.scribbles"
        },
        {
            "location": "/docs/utils.mask/",
            "text": "davisinteractive.utils.mask\n\n\n\ncombine_masks\n\n\n\ncombine_masks\n(\nmasks\n,\n \nth\n=\n0.5\n,\n \nmethod\n=\n'max_per_pixel'\n)\n\n\n\nCombine mask for different objects.\n\n\nDifferent methods are the following:\n\n\n\n\nmax_per_pixel\n: Computes the final mask taking the pixel with the highest\n                   probability for every object.\n\n\n\n\nArguments\n\n\n\n\nmasks\n: List. Containing a list of masks for every object.\n        Therefore, \nlen(masks) == number_objects\n and\n        \nlen(masks[0]) == number_frames\n. The masks should be Numpy Array.\n\n\nth\n: Float. Threshold to binarize the masks.\n\n\nmethod\n: String. Method that specifies how the masks are fused.\n\n\n\n\nReturns\n\n\nlist\n: Returns a list with all the results of the masks fused.",
            "title": "utils.mask"
        },
        {
            "location": "/docs/utils.visualization/",
            "text": "davisinteractive.utils.visualization\n\n\n\nplot_scribble\n\n\n\nplot_scribble\n(\nax\n,\n \nscribble\n,\n \nframe\n,\n \noutput_size\n=\nNone\n,\n \n**\nkwargs\n)\n\n\n\nPlot scribbles into an axis.\n\n\nArguments\n\n\n\n\nax\n: Matplotlib Axis. Axis where to plot the scribble lines.\n\n\nscribbles\n: Scribble. Scribble to plot.\n\n\nframe\n: Integer. Frame of the scribble to plot.\n\n\noutput_size\n: Tuple. Image size to scale the scribble points \n(H, W)\n.\n\n\n**kwargs\n: Dictionary. Additional parameters to pass at the\n        \nax.plot(**kwargs)\n method.\n\n\n\n\nReturns\n\n\nmatplotlib.axis\n: Returns the given axis with the scribbles plotted on\n        it.\n\n\ndraw_scribble\n\n\n\ndraw_scribble\n(\nimg\n,\n \nscribble\n,\n \nframe\n,\n \noutput_size\n=\nNone\n,\n \nwidth\n=\n5\n)\n\n\n\nDraw scribbles into a PIL Image.\n\n\nArguments\n\n\n\n\nimg\n: PIL Image. Image where to draw the scribbles.\n\n\nscribbles\n: Scribble. Scribble to plot.\n\n\nframe\n: Integer. Frame of the scribble to plot.\n\n\noutput_size\n: Tuple. Image size to scale the scribble points \n(H, W)\n.\n\n\nwidth\n: Integer. Width of the drawed lines.\n\n\n\n\nReturns\n\n\nPIL Image\n: Returns the original image \nimg\n with the scribble draw on\n        it.\n\n\noverlay_mask\n\n\n\noverlay_mask\n(\nim\n,\n \nann\n,\n \nalpha\n=\n0.5\n,\n \ncolors\n=\nNone\n,\n \ncontour_thickness\n=\nNone\n)\n\n\n\nOverlay mask over image.\n\n\nThis function allows you to overlay a mask over an image with some\ntransparency.\n\n\nArguments\n\n\n\n\nim\n: Numpy Array. Array with the image. The shape must be (H, W, 3) and\n        the pixels must be represented as \nnp.uint8\n data type.\n\n\nann\n: Numpy Array. Array with the mask. The shape must be (H, W) and the\n        values must be intergers\n\n\nalpha\n: Float. Proportion of alpha to apply at the overlaid mask.\n\n\ncolors\n: Numpy Array. Optional custom colormap. It must have shape (N, 3)\n        being N the maximum number of colors to represent.\n\n\ncontour_thickness\n: Integer. Thickness of each object index contour draw\n        over the overlay. This function requires to have installed the\n        package \nopencv-python\n.\n\n\n\n\nReturns\n\n\nNumpy Array\n: Image of the overlay with shape (H, W, 3) and data type\n        \nnp.uint8\n.",
            "title": "utils.visualization"
        },
        {
            "location": "/docs/third_party/mask_api/",
            "text": "davisinteractive.third_party.mask_api.mask\n\n\n\nInterface for manipulating masks stored in RLE format.\n\n\nThis code interfaces with the implementation of the COCOAPI to encode and\ndecode binary masks. Original code is available\n\nhere\n.\n\n\nCopyright \u00a9 2014, Piotr Dollar and Tsung-Yi Lin\nAll rights reserved.\n\n\nencode_mask\n\n\n\nencode_mask\n(\nmask\n,\n \nnb_objects\n=\nNone\n)\n\n\n\nEncode a mask.\n\n\nIt accepts multiple indexes on the mask. The mask for every index will be\nencoded in a different RLE.\n\n\nArguments\n\n\n\n\nbimask\n: Numpy Array. Mask array with the index of every pixel. The shape\n        must be (H, W) and all the values are supposed to be integers.\n\n\nnb_objects\n: Integer. Number of objects in the mask. If not given the\n        value will be infered. If given, the computation will be faster.\n\n\n\n\nReturn\n\n\nDictionary: Dictionary with the RLE of the mask.\n\n\n\n\n\ndecode_mask\n\n\n\ndecode_mask\n(\nencoding\n)\n\n\n\nDecode a mask.\n\n\nDecode a multi index mask and return its mask as a Numpy Array.\n\n\nArguments\n\n\n\n\nencoding\n: Dictionary. Mask encoded object.\n\n\n\n\nReturns\n\n\nNumpy Array\n: Mask decoded with shape (H, W).\n\n\nencode_batch_masks\n\n\n\nencode_batch_masks\n(\nmasks\n,\n \nnb_objects\n=\nNone\n)\n\n\n\nEncode a batch of masks.\n\n\nIt accepts multiple indexes on the mask. The mask for every index will be\nencoded in a different RLE.\n\n\nArguments\n\n\n\n\nbimask\n: Numpy Array. Mask array with the index of every pixel. The shape\n        must be (B, H, W) and all the values are supposed to be integers.\n\n\nnb_objects\n: Integer. Number of objects in the mask. If not given the\n        value will be infered. If given, the computation will be faster.\n\n\n\n\nReturn\n\n\nDictionary: Dictionary with the RLE of the masks.\n\n\n\n\n\ndecode_batch_masks\n\n\n\ndecode_batch_masks\n(\nencoding\n)\n\n\n\nDecode a batch of mask.\n\n\nDecode a multi index mask and return its mask as a Numpy Array.\n\n\nArguments\n\n\n\n\nencoding\n: Dictionary. Mask encoded object.\n\n\n\n\nReturns\n\n\nNumpy Array\n: Mask decoded with shape (B, H, W).",
            "title": "third_party.mask_api"
        },
        {
            "location": "/license/",
            "text": "GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007\n\n\n\n\n\nCopyright (C) 2007 Free Software Foundation, Inc. \nhttp://fsf.org/\n\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n                        Preamble\n\n\n\n\n\nThe GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n\nWhen we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n\nTo protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n\nFor example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n\nDevelopers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n\nFor the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n\nSome devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n\nFinally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n\n                   TERMS AND CONDITIONS\n\n\n\n\n\n\n\nDefinitions.\n\n\n\n\n\"This License\" refers to version 3 of the GNU General Public License.\n\n\n\"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n\n\"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n\nTo \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n\nA \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n\nTo \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n\nTo \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n\nAn interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n\n\n\nSource Code.\n\n\n\n\nThe \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n\nA \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n\nThe \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n\nThe \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n\nThe Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n\nThe Corresponding Source for a work in source code form is that\nsame work.\n\n\n\n\nBasic Permissions.\n\n\n\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n\nYou may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n\nConveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n\n\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n\n\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n\n\n\nConveying Verbatim Copies.\n\n\n\n\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n\n\n\nConveying Modified Source Versions.\n\n\n\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n\n\n\n\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n\n\n\nConveying Non-Source Forms.\n\n\n\n\nYou may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n\n\n\n\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n\nA \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n\n\"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n\n\n\nAdditional Terms.\n\n\n\n\n\"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n\n\n\n\n\nAll other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n\n\n\nTermination.\n\n\n\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n\nHowever, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n\n\n\nAcceptance Not Required for Having Copies.\n\n\n\n\nYou are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n\n\n\nAutomatic Licensing of Downstream Recipients.\n\n\n\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n\nAn \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n\n\n\nPatents.\n\n\n\n\nA \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n\nA contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n\nIn the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n\nA patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n\n\n\nNo Surrender of Others' Freedom.\n\n\n\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n\n\n\nUse with the GNU Affero General Public License.\n\n\n\n\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n\n\n\nRevised Versions of this License.\n\n\n\n\nThe Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n\nEach version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n\nIf the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n\nLater license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n\n\n\nDisclaimer of Warranty.\n\n\n\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\n\n\nLimitation of Liability.\n\n\n\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n\n\n\nInterpretation of Sections 15 and 16.\n\n\n\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n\n\n\n\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n\nTo do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n\nPackage to evaluate interactive segmentation with scribbles at DAVIS dataset.\nCopyright (C) 2018  Alberto Montes\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\n\nIf the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n\nDAVIS Interactive  Copyright (C) 2018  Alberto Montes\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n\n\n\n\n\nThe hypothetical commands \nshow w' and\nshow c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n\nYou should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n\nhttp://www.gnu.org/licenses/\n.\n\n\nThe GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n\nhttp://www.gnu.org/philosophy/why-not-lgpl.html\n.",
            "title": "License"
        }
    ]
}